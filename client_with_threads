package com;
import java.io.File;
import java.nio.file.Files;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.*;

public class sender {
	public static int size; 
	public static boolean ack[];
	public static byte[][] datas;
	public static int []sended;
	public static Pack[] pacotes;
	public static void main(String[] args) throws IOException {

		 	new Thread(t1).start();
	        new Thread(t2).start();
	        new Thread(t3).start();
	        

	}
	
	private static Runnable t1 = new Runnable() {
        public void run() {
            try{
	DatagramSocket clientSocket = new DatagramSocket();
	InetAddress IPServer = InetAddress.getByName("localhost");
	byte[] array = Files.readAllBytes(new File("C:\\Users\\lucas.vinicius\\Desktop\\prot2.zip").toPath());
	size = array.length/512;
	ack = new boolean[size/512];
	sended = new int [size];
	datas = thedivision(array);
	int x=0;
	
	pacotes = new Pack[size/512];	
	
	x=0;
	ack[0]=true;
	int janela=size/1024;
	while(true) {
		
	if(x<janela ||ack[x-janela]) {	
	pacotes[x] = new Pack(x, datas[x],"local","local", size);	
	byte[] temp=toByteArray(pacotes[x]);
	DatagramPacket sendPacket = new DatagramPacket(temp, temp.length, IPServer, 5000);
	long as = System.nanoTime();
	clientSocket.send(sendPacket);
	
	x++;
	}
	
	}
            } catch (Exception e){}
            
        }
    };
	

    private static Runnable t2 = new Runnable() {
        public void run() {
            try{
            	int x = 0;
		while(true) {
			
		if(System.currentTimeMillis()-pacotes[x].sendtime>2 & !ack[x]) {
			pacotes[x] = new Pack(x, datas[x],"local","local", size);	
			byte[] tempo=toByteArray(pacotes[x]);
			DatagramSocket clientSocket = new DatagramSocket();
			InetAddress IPServer = InetAddress.getByName("localhost");
		DatagramPacket sendPacket = new DatagramPacket(tempo, tempo.length, IPServer, 5000);
		long as = System.nanoTime();
		clientSocket.send(sendPacket);
		
		}else if(ack[x]) {x++;}
		}
	}  catch (Exception e){}
	 
    }
};
	

private static Runnable t3 = new Runnable() {
    public void run() {
        try{

        	DatagramSocket serverSocket = new DatagramSocket(5001);
        	byte[] receiveData = new byte[1000];
        	
        	while(true) {
        	DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
        	
        	serverSocket.receive(receivePacket);
        	String received = new String(receivePacket.getData(), 0, receivePacket.getLength());
        	
        	ack(received);
        	
        	}
        		

        }  catch (Exception e){}
   	 
    }
};
	


	public static void ack(String recebidoServer) {
		Random rndNumber= new Random();
		int a = rndNumber.nextInt(100);
		if(a<75) {
		ack[Integer.parseInt(recebidoServer)]=true;
		}
		
	
	}
	
	public static byte[] toByteArray(Pack obj) throws IOException {
        byte[] bytes = null;
        ByteArrayOutputStream bos = null;
        ObjectOutputStream oos = null;
        try {
            bos = new ByteArrayOutputStream();
            oos = new ObjectOutputStream(bos);
            oos.writeObject(obj);
            oos.flush();
            bytes = bos.toByteArray();
        } finally {
            if (oos != null) {
                oos.close();
            }
            if (bos != null) {
                bos.close();
            }
        }
        return bytes;
    }
	public static byte[][] thedivision(byte[] a){
		int y=0;
		byte[][] datas = new byte[a.length/512][512];
		
		while(y<a.length/512) {
		int x=0;
		while(x<512) {
			datas[y][x]=a[y*512+x];
			x++;
		}
		y++;
	}
	return datas;	
	}

}

package com;
import java.io.File;
import java.nio.file.Files;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.*;

public class sender {
	public static int size; 
	public static boolean ack[]=new boolean[size/512];
	public static void main(String[] args) throws IOException {

		DatagramSocket clientSocket = new DatagramSocket();
		InetAddress IPServer = InetAddress.getByName("localhost");
		byte[] array = Files.readAllBytes(new File("C:\\Users\\lucas.vinicius\\Desktop\\prot2.zip").toPath());

		
		byte[][] datas;
		datas = thedivision(array);
		int x=0;
		
		Pack[] pacotes = new Pack[size/512];
		while(x<size/512) {
		pacotes[x] = new Pack(x, datas[x],"local","local");	
			
		x++;
		}
		x=0;
		ack[0]=true;
		int janela=size/1024;
		while(true) {
			
		if(x<janela ||ack[x-janela]) {	
		byte[] temp=toByteArray(pacotes[x]);
		DatagramPacket sendPacket = new DatagramPacket(temp, temp.length, IPServer, 5000);
		long as = System.nanoTime();
		clientSocket.send(sendPacket);
		timeout(pacotes, x, temp);
		byte[] receiveData = new byte[1000];
		DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
		clientSocket.receive(receivePacket);
		String recebidoServer = new String(receivePacket.getData(), 0, receivePacket.getLength());
		ack = ack(recebidoServer, ack);
		x++;
		}
		
		}
		
	

	}
	
public static void timeout(Pack pack[], int xcopy, byte[] temp)  throws IOException {
	boolean y= true;	
	while(y) {
		
		if(System.currentTimeMillis()-pack[xcopy].sendtime>2 & !ack[xcopy]) {
			DatagramSocket clientSocket = new DatagramSocket();
			InetAddress IPServer = InetAddress.getByName("localhost");
		DatagramPacket sendPacket = new DatagramPacket(temp, temp.length, IPServer, 5000);
		long as = System.nanoTime();
		clientSocket.send(sendPacket);
		timeout(pack, xcopy, temp);
		byte[] receiveData = new byte[1000];
		DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
		clientSocket.receive(receivePacket);
		String recebidoServer = new String(receivePacket.getData(), 0, receivePacket.getLength());
		ack = ack(recebidoServer, ack);
		}
		
	}
	}

	public static boolean [] ack(String recebidoServer, boolean[] ack) {
		Random rndNumber= new Random();
		int a = rndNumber.nextInt(100);
		if(a<75) {
		ack[Integer.parseInt(recebidoServer)]=true;
		}
		return ack;
	
	}
	
	public static byte[] toByteArray(Pack obj) throws IOException {
        byte[] bytes = null;
        ByteArrayOutputStream bos = null;
        ObjectOutputStream oos = null;
        try {
            bos = new ByteArrayOutputStream();
            oos = new ObjectOutputStream(bos);
            oos.writeObject(obj);
            oos.flush();
            bytes = bos.toByteArray();
        } finally {
            if (oos != null) {
                oos.close();
            }
            if (bos != null) {
                bos.close();
            }
        }
        return bytes;
    }
	public static byte[][] thedivision(byte[] a){
		int y=0;
		byte[][] datas = new byte[a.length/512][512];
		
		while(y<a.length/512) {
		int x=0;
		while(x<512) {
			datas[y][x]=a[y*512+x];
			x++;
		}
		y++;
	}
	return datas;	
	}

}
